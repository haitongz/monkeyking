1. 一个binary search写的有bug， 让你改错，不能改超过三行。
根我感觉错误出在求中间index的时候值自然偏左，然后它的写法一些test case里面会进入死循环。
2. 用stack实现一个输入是polish reverse notation那种的计算器。我才发现leetcode上有那么一道类似的题。
不难但是有点烦因为它让你检查各种非法输入然后返回－1，然后保证stack里面的数都不能超过12位，要查overflow。
3. 直角坐标系里给两个长方形，各边都和坐标轴平行，给了它们的左下和右上顶点的坐标，让求合起来的面积，当然，要是否有重合的部分。

 1. Find coordinates of intersection A rectangle is called   rectilinear if its edges are all parallel to coordinated axes. Such a rectangle can be described by specifying the coordinated of its lower-left and upper-right corners. Write a function: function solution($K,$L,$M,$N,$P,$Q,$R,$S); that given eight integers representing two rectilinear rectangles (one with lower-left corner (K,L) and upper right corner (M,N), and another with lower-left corner (P,Q) and upper-right corner (R,S)), returns the area of the sum of the rectangles. If the rectangles intersect the area of the intersection should be counted only once. The function should return -1 if the area of the sum exceeds 2,147,483,647. For example Given Integers: K= -4 L = 1 M = 2 N = 6 P = 0 Q = -1 R = 4 S = 3 **the function should return 42** * The area of the First rectangle is 30 and the area of the second rectangle is 16 and the area of their intersection is 4. Assume that * K,L,M,N,P,Q,R and S are integers within the range [-2147483648...2147483647]. * K<M * L<N * P<R * Q<S 

    C#:
    
    int solution(int K, int L, int M, int N, int P, int Q, int R, int S)
        {
            // write your code in C# 5.0 with .NET 4.5
            int result=0;
            Rect r1 = new Rect(K, L, M, N);
            int AreaR1 = r1.Area;
            Rect r2 = new Rect(P, Q, R, S);
            int AreaR2 = r2.Area;
            Rect r3 = Rect.Intersect(r1, r2);
            int AreaR3 = 0;
            if (r3 != null)
            {
                AreaR3 = r3.Area;
            }
            result = (AreaR1 + AreaR2 - AreaR3);
            return result;
        }
    }
class Rect
    {
        public int Left { get; set; }
        public int Top { get; set; }
        public int Right { get; set; }
        public int Bottom { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
        public int Area { get; set; }
 
        public Rect(int K, int L, int M, int N)
        {
            Left = K;
            Bottom = L;
            Right = M;
            Top = N;
            Width = Right - Left;
            Width=Width < 0 ? (~Width + 1) : Width;
            Height = Top - Bottom;
            Height = Height < 0 ? (~Height + 1) : Height;
            Area = Width * Height;
        }
        public static Rect Intersect(Rect r1, Rect r2)
        {
            bool IsIntersect=true;
            Rect r3=null;
            int P=0, Q=0, R=0, S=0;
            if((r2.Right<r1.Left || r2.Left>r1.Right) ||
                (r2.Bottom>r1.Top || r2.Top<r1.Bottom ))
                    IsIntersect=false;
            if(IsIntersect)
            {
                P = r2.Left > r1.Left ? r2.Left : r1.Left;
                R = r2.Right > r1.Right ? r1.Right : r2.Right;
                Q= r2.Bottom > r1.Bottom ? r2.Bottom:r1.Bottom;
                S= r2.Top >r1.Top ? r1.Top : r2.Top;
                r3=new Rect(P,Q,R,S);
            }
            return r3;
        }
    }

python:
def rectilinear(k, l, m, n, p, q, r, s):
    areaA = (m - k) * (n - l)
    areaB = (r - p) * (s - q)
    totalArea = areaA + areaB

    # check if rectangles intersect
    if (k < p and l > q):
        intersectionX1 = max(k, p)
        intersectionX2 = min(m, r)
        intersectionY1 = max(l, q)
        intersectionY2 = min(n, s)
        intersectionArea = (intersectionX2 - intersectionX1) * (intersectionY2 - intersectionY1)
        totalArea =- intersectionArea
    if (totalArea < 0): # it probably did a wrap-around and is greater than sys.maxint
        return -1
    return totalArea

print(rectilinear(-4,1, 2, 6, 0, -1, 4, 3))

    
1.
用malloc实现alloc (我也不知道是啥，反正是很底层的function，为了优化malloc的memory管理和time)
#define ALLOCSIZE 10000 /* size of available space */
 
static char allocbuf[ALLOCSIZE]; /* storage for alloc */
static char *allocp = allocbuf; /* next free position */
 
char *alloc(int n) /* return pointer to n characters */
{
    if (allocbuf + ALLOCSIZE - allocp >= n) { /* it fits */
        allocp += n;
        return allocp - n; /* old p */
    } else /* not enough room */
        return 0;
}
 
void afree(char *p) /* free storage pointed to by p */
{
    if (p >= allocbuf && p < allocbuf + ALLOCSIZE)
    allocp = p;
}

https://msdn.microsoft.com/en-us/library/dd998050.aspx

2.  leetcode permutation
我用了这里的第二个解法 

vector<vector<int> > permute(vector<int> &num) {
        vector<vector<int> > res;
        permuteDFS(num, 0, res);
        return res;
    }
    void permuteDFS(vector<int> &num, int start, vector<vector<int> > &res) {
        if (start >= num.size()) res.push_back(num);
        for (int i = start; i < num.size(); ++i) {
            swap(num[start], num[i]);
            permuteDFS(num, start + 1, res);
            swap(num[start], num[i]);
        }
    }
   
    
让我说了一遍用dfs怎么做。。
3. leetcode add two numbers
followup: 如何加快程序。。用stack不用heap。。减少branch pridiction。。。
4.C++: inheritance, pointers, reference, semephore...
Binary search to find the first occurrance of the target element

第一题给了一个函数，可以从一个数组中找出出现次数最多的数字，找出里面的bug。
非常的简单，只要带入几个不同的edge case就可以发现bug所在。然后要求修改原来的函数，改动不能超过4行。
第二题是输入一个string，根据string里面的内容对于string进行处理，最后得到一个interger的结果。
其实就是实现一个小型stack+计算器的函数。例如输入"13 DUP 4 POP 5 DUP + DUP + -", space用来分隔没一个命令，
遇到数字则入stack, 遇到string或者符号则对stack进行操作。这道题难度不大，因为我用的是python，python对于实现stack还是非常简单的。
第三题难度最大，其实就是公交车的月票系统，给出一个数组包含了你在这个月需要坐车的date，
然后提供两种票，一个是日票，2块钱一天，一个是周票，7块钱一周。 然后算出你这个月如何可以花最少的钱。
我的思路大概就是构建一个7天的window，然后筛选出不符合周票的天数。例如[1，2，3，4，15，28，29] 得到结果应该是13块钱。


http://massivealgorithms.blogspot.com/2015/12/leetcode-322-coin-change.html



decimal-zip:

int solve(int A, int B) {
        if (A < 0 || A > 100000000) return -1;
        if (B < 0 || B > 100000000) return -1;
        if (!A)
            return B;
        else if (!B) {
            int n = reverse(A);
            int ret = n%10 * 10; // append 0 from B
            n /= 10;
            A /= 10;
            
            do {
                ret = ret*10 + n%10;
                n /= 10;
                A /= 10;
            } while (A);
            
            return ret > 100000000 ? -1 : ret;
        }

        int rA = reverse(A);
        int rB = reverse(B);

        int zipped = 0;
        // complexity: O(log(A)+log(B))
        do {
            if (A > 0) {
                zipped = zipped*10 + rA%10;
                rA /= 10;
                A /= 10;
            }

            if (B > 0) {
                zipped = zipped*10 + rB%10;
                rB /= 10;
                B /= 10;
            }
        } while (A > 0 || B > 0);

        if (zipped > 100000000) return -1;

        return zipped;
    }

private:
    // complexity: O(log(n)) time, O(1) space
    // precondition: n >= 0
    int reverse(int n) {
        int reversed = 0;
        while(n > 0) {
            reversed = reversed*10 + n%10;
            n /= 10;
        }

        return reversed;
    }
};

comforting numbers:
http://stackoverflow.com/questions/23397829/codility-condition-in-comfort


#define CHECKBIT(var,pos) ((var) & (1<<(pos)))

function<uint(int)> count0s = [&](int n) {
    uint ret;
    for (ret = 0; n; n>>= 1) {
        if (!(n&1)) {
            ++ret;
        }
    }
    
    return ret;
};

int a = pow(2, count0s(A));
int b = pow(2, count0s(B));
int c = pow(2, count0s(C));
uint ab0s = 0;
uint ac0s = 0;
uint bc0s = 0;
uint abc0s = 0;

for (uint i = 0; i < 30; ++i) {
    if (!CHECKBIT(A,i) && !CHECKBIT(B,i)) { // check case A|B
        ++ab0s;
    }
    if (!CHECKBIT(A,i) && !CHECKBIT(C,i)) { // check case A|C
        ++ac0s;
    }
    if (!CHECKBIT(C,i) && !CHECKBIT(B,i)) { // check case C|B
        ++bc0s;
    }
    if (!CHECKBIT(A,i) && !CHECKBIT(B,i) && !CHECKBIT(C,i)) { // check case A|B|C
        ++abc0s;
    }
}

int ab = pow(2, ab0s);
int ac = pow(2, ac0s);
int bc = pow(2, bc0s);
int abc = pow(2, abc0s);

return a+b+c-ab-ac-bc+abc;
}

void unionList( struct node *p, struct node *q, struct node **s )
{
struct node *z ;

z = NULL ;

/* if both lists are empty */
if ( p == NULL && q == NULL )
return ;

/* traverse both linked lists till the end. If end of any one list is reached loop is terminated */
while ( p != NULL && q != NULL )
{
/* if node being added in the first node */
if ( *s == NULL )
{
*s = malloc ( sizeof ( struct node ) ) ;
z = *s ;
}
else
{
z -> link = malloc ( sizeof ( struct node ) ) ;
z = z -> link ;
}

if ( p -> data < q -> data )
{
z -> data = p -> data ;
p = p -> link ;
}
else
{
if ( q -> data < p ->data)
{
z -> data = q -> data ;
q = q -> link ;
}
else
{
if ( p -> data == q -> data )
{
z -> data = q -> data ;
p = p -> link ;
q = q -> link ;
}
}
}
}

/* if end of first list has not been reached */
while ( p != NULL )
{
z -> link = malloc ( sizeof ( struct node ) ) ;
z = z -> link ;
z -> data = p -> data ;
p = p -> link ;
}

/* if end of second list has been reached */
while ( q != NULL )
{
z -> link = malloc ( sizeof ( struct node ) ) ;
z = z -> link ;
z -> data = q -> data ;
q = q -> link ;
}
z -> link = NULL ;
}
//iterate  over both lists once to determine the minimum and maximum value. From these values we create a vector. With this vector we iterate over both lists again. For each number n in the list we increase the value in the vector on position n with 1. This makes sure that elements that are in the intersection will have a value of 2 in the vector, elements that are in the union will then have a value of 1. Elements that are absent will have a value of 0. Then the only thing we need to do is iterate over the vector and add the indices that have a value of 2 to the intersection and add the indices that have a value of 1 to the union. And done.
